# Frontend Dockerfile - Con variables de entorno correctas
FROM node:16-alpine AS builder

# Build arguments
ARG REACT_APP_BACKEND_URL=http://localhost:8001

# Set working directory
WORKDIR /app

# Install Python and build tools for native dependencies
RUN apk add --no-cache python3 make g++

# Copy package files first
COPY package.json ./

# Clean install
RUN rm -f yarn.lock package-lock.json
RUN yarn install --legacy-peer-deps --ignore-engines --network-timeout 300000

# Set environment variables BEFORE copying source
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL
ENV GENERATE_SOURCEMAP=false
ENV NODE_OPTIONS="--max-old-space-size=4096" 
ENV CI=true

# Copy source code AFTER setting env vars
COPY . .

# Create .env file with correct URL
RUN echo "REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}" > .env

# Build the app
RUN yarn build

# Production stage
FROM nginx:alpine

# Install wget for potential health checks
RUN apk add --no-cache wget

# Copy built assets
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create directories
RUN mkdir -p /var/cache/nginx/client_temp \
    && mkdir -p /var/cache/nginx/proxy_temp \
    && mkdir -p /var/cache/nginx/fastcgi_temp \
    && mkdir -p /var/cache/nginx/uwsgi_temp \
    && mkdir -p /var/cache/nginx/scgi_temp

# Set permissions
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 \
    && chown -R nextjs:nodejs /usr/share/nginx/html

# Expose port
EXPOSE 3000

# Start nginx
CMD ["nginx", "-g", "daemon off;"]