# Combined Frontend + Backend Dockerfile
# Todo en un solo contenedor, sin problemas de CORS

# Stage 1: Build Frontend
FROM node:16-alpine AS frontend-builder

WORKDIR /app/frontend

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy frontend package files
COPY frontend/package.json ./
RUN rm -f yarn.lock package-lock.json
RUN yarn install --legacy-peer-deps --ignore-engines --network-timeout 300000

# Set environment variables for build
ENV REACT_APP_BACKEND_URL=""
ENV GENERATE_SOURCEMAP=false
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV CI=true

# Copy frontend source and build
COPY frontend/ ./
RUN yarn build

# Stage 2: Python Backend with Frontend
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        && rm -rf /var/lib/apt/lists/*

# Copy backend requirements and install
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ ./

# Copy frontend build from previous stage
COPY --from=frontend-builder /app/frontend/build /app/frontend_build

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser \
    && chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8001

# Run the combined application
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8001"]