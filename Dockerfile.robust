# Dockerfile ROBUSTO - Maneja yarn/npm automÃ¡ticamente
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend

# Copiar package.json
COPY frontend/package.json ./

# Copiar yarn.lock solo si existe (usando pattern opcional)
COPY frontend/yarn.loc[k] ./

# Instalar con yarn si existe yarn.lock, sino con npm
RUN if [ -f yarn.lock ]; then \
        echo "ðŸ”§ Usando YARN..." && \
        yarn install --frozen-lockfile --network-timeout 100000; \
    else \
        echo "ðŸ”§ Usando NPM..." && \
        npm install; \
    fi

# Copiar cÃ³digo fuente
COPY frontend/ ./

# Build
RUN if [ -f yarn.lock ]; then \
        yarn build; \
    else \
        npm run build; \
    fi

# Imagen final
FROM python:3.11-slim

RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Backend
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY backend/ ./

# Frontend build
COPY --from=frontend-build /app/frontend/build ./frontend_build

# Datos
RUN mkdir -p /app/data

# Variables
ENV CORS_ORIGINS="*"
ENV ADMIN_USERNAME="admin"
ENV ADMIN_PASSWORD_HASH="b8d6c1a9b2e5d7f3:a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890"
ENV JWT_SECRET="production_jwt_secret_change_this"

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]