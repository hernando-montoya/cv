# Stack CV App - Con configuraci√≥n persistente de puertos
# Este YML fuerza que el puerto MongoDB siempre est√© disponible

version: '3.8'

services:
  mongodb:
    image: mongo:5.0
    container_name: cv_mongodb
    restart: always  # üëà SIEMPRE REINICIAR
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: securepassword123
      MONGO_INITDB_DATABASE: cv_database
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    ports:
      - "27017:27017"  # üëà PUERTO FORZADO
    networks:
      - cv_network
    # Configuraci√≥n adicional para estabilidad
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 120s
    # Health check personalizado
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.portainer
    container_name: cv_backend
    restart: always
    environment:
      MONGO_URL: mongodb://admin:securepassword123@mongodb:27017/cv_database?authSource=admin
      DB_NAME: cv_database
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD_HASH: b8d6c1a9b2e5d7f3:a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890
      JWT_SECRET: production_jwt_secret_change_this
      CORS_ORIGINS: "*"
    ports:
      - "8007:8001"
    networks:
      - cv_network
    depends_on:
      mongodb:
        condition: service_healthy
    # Health check para el backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.portainer
      args:
        REACT_APP_BACKEND_URL: http://backend:8001
    container_name: cv_frontend
    restart: always
    environment:
      REACT_APP_BACKEND_URL: http://backend:8001
    ports:
      - "8006:3000"
    networks:
      - cv_network
    depends_on:
      backend:
        condition: service_healthy

  # Inicializador con retry autom√°tico
  data-init:
    build:
      context: ./backend
      dockerfile: Dockerfile.portainer
    container_name: cv_data_init
    environment:
      MONGO_URL: mongodb://admin:securepassword123@mongodb:27017/cv_database?authSource=admin
      DB_NAME: cv_database
    networks:
      - cv_network
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      sh -c "
        echo '‚è≥ Esperando MongoDB (con health check)...' &&
        sleep 10 &&
        echo 'üìù Inicializando datos del CV...' &&
        python init_data.py &&
        echo '‚úÖ CV App lista! Frontend: Puerto 8006 | Backend: Puerto 8007' &&
        echo 'üîó MongoDB accesible en localhost:27017'
      "
    restart: "no"

  # Monitor del puerto (opcional)
  mongo-monitor:
    image: alpine:latest
    container_name: cv_mongo_monitor
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - cv_network
    command: >
      sh -c "
        apk add --no-cache netcat-openbsd &&
        echo 'üîç Monitor de puerto MongoDB iniciado' &&
        while true; do
          if ! nc -z mongodb 27017; then
            echo '[MONITOR] Puerto 27017 no accesible desde el contenedor'
          fi
          sleep 60
        done
      "

networks:
  cv_network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

# üìã CARACTER√çSTICAS DE ESTE YML:
# ‚úÖ Puerto 27017 siempre expuesto
# ‚úÖ Restart policy agresiva (always)
# ‚úÖ Health checks para todos los servicios
# ‚úÖ Depends_on con condiciones de health
# ‚úÖ Monitor interno del puerto MongoDB
# ‚úÖ Inicializaci√≥n autom√°tica mejorada