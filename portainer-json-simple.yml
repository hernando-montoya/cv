# Stack CV App - JSON Storage Simple
# SOLO 2 contenedores: Frontend + Backend
# Sin MongoDB - Datos en archivos JSON

version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.no-healthcheck
    container_name: cv_backend
    restart: unless-stopped
    environment:
      CORS_ORIGINS: "*"
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD_HASH: b8d6c1a9b2e5d7f3:a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890
      JWT_SECRET: production_jwt_secret_change_this
    ports:
      - "8007:8001"
    volumes:
      - cv_data:/app/data  # Volumen para persistir datos JSON
    networks:
      - cv_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.portainer
      args:
        REACT_APP_BACKEND_URL: http://192.168.1.18:8007
    container_name: cv_frontend
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_URL: http://192.168.1.18:8007
    ports:
      - "8006:3000"
    networks:
      - cv_network
    depends_on:
      - backend

networks:
  cv_network:
    driver: bridge

volumes:
  cv_data:
    driver: local

# üéâ CONFIGURACI√ìN ULTRA SIMPLIFICADA:
# 
# ‚úÖ VENTAJAS:
# - Solo 2 contenedores (sin MongoDB)
# - Datos persistentes en JSON
# - Backup autom√°tico
# - Deploy mucho m√°s r√°pido
# - Sin problemas de conectividad MongoDB
# - Menos recursos (memoria/CPU)
# 
# üìã ACCESO:
# Frontend: http://192.168.1.18:8006
# Backend: http://192.168.1.18:8007
# Admin Panel: http://192.168.1.18:8006/admin
# 
# üîê LOGIN ADMIN:
# Usuario: admin
# Password: password123
# 
# üìÅ DATOS:
# Los datos del CV se guardan en: /app/data/cv_content.json
# Backups autom√°ticos en: /app/data/backups/
# 
# üöÄ CARACTER√çSTICAS:
# - Import/Export JSON
# - Backup autom√°tico al guardar
# - Restauraci√≥n desde backups
# - API REST completa
# - Sistema CMS funcional