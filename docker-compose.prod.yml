# Production Docker Compose Configuration
version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cv_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - cv_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB with authentication
  mongodb:
    image: mongo:5.0
    container_name: cv_mongodb_prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
    volumes:
      - mongodb_data_prod:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - cv_network
    command: mongod --config /etc/mongod.conf
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cv_backend_prod
    restart: unless-stopped
    environment:
      MONGO_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${DB_NAME}?authSource=admin
      DB_NAME: ${DB_NAME}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD_HASH: ${ADMIN_PASSWORD_HASH}
      JWT_SECRET: ${JWT_SECRET}
      PYTHONPATH: /app
    networks:
      - cv_network
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/api/', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    container_name: cv_frontend_prod
    restart: unless-stopped
    networks:
      - cv_network
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Initializer
  data-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cv_data_init_prod
    environment:
      MONGO_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${DB_NAME}?authSource=admin
      DB_NAME: ${DB_NAME}
    networks:
      - cv_network
    depends_on:
      mongodb:
        condition: service_healthy
    command: python init_data.py
    restart: "no"

networks:
  cv_network:
    driver: bridge

volumes:
  mongodb_data_prod:
    driver: local
  mongodb_config:
    driver: local
  nginx_logs:
    driver: local